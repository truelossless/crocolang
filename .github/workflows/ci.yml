name: ci

defaults:
  run:
    shell: bash

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  CARGO_TERM_COLOR: always

jobs:
  # build croco on every OS
  build:
    runs-on: ${{ matrix.os }}
    env: ${{ matrix.env }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            env:
              LLVM_SYS_100_PREFIX: /tmp/llvm
          - os: windows-latest
            env:
              LLVM_SYS_100_PREFIX: C:/llvm
          - os: macos-latest
            env:
              LLVM_SYS_100_PREFIX: /tmp/llvm

    steps:
      - name: Clone project
        uses: actions/checkout@v2

      - name: Cache LLVM
        id: cache-llvm
        uses: actions/cache@v2
        with:
          path: ${{ env.LLVM_SYS_100_PREFIX }}
          key: llvm-${{ matrix.os }}

      - name: Download LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: curl -O -L https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.1-rc4/llvm-10.0.1rc4.src.tar.xz
          
      - name: Unzip LLVM
        # windows tar doesn't support xz files, so we use 7z instead in two steps
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          7z x llvm-10.0.1rc4.src.tar.xz
          7z x llvm-10.0.1rc4.src.tar

      - name: Move LLVM to the right path
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: mv llvm-10.0.1rc4.src $LLVM_SYS_100_PREFIX

      - uses: seanmiddleditch/gha-setup-ninja@v2
        if: steps.cache-llvm.outputs.cache-hit != 'true'
      
      - name: Build LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          cd $LLVM_SYS_100_PREFIX
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DLLVM_TARGETS_TO_BUILD="X86;AArch64;ARM" -G Ninja ..
          cmake --build . --config Release
          cmake -DCMAKE_INSTALL_PREFIX=$LLVM_SYS_100_PREFIX -P cmake_install.cmake
        

      - name: Build Croco release
        run: |
          cd $GITHUB_WORKSPACE
          cargo build --release

      - name: Run tests
        run: cargo test --release --lib --tests --no-fail-fast

      - name: Zip crocoi & crocol [windows]
        if: matrix.os == 'windows-latest'
        run: |
          cd target/release
          tar -a -c -f croco.zip crocoi.exe crocol.exe

      - name: Zip crocoi & crocol [unix]
        if: matrix.os != 'windows-latest'
        run: |
          cd target/release
          tar -a -c -f croco.zip crocoi crocol

      - name: Upload zip
        uses: actions/upload-artifact@v2
        with:
          name: croco-${{ matrix.os }}
          path: croco.zip

  # upload the resulting binaries to github releases
  upload:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # retreive the previously saved binaries
      - uses: actions/download-artifact@v2
        with:
          name: croco-ubuntu-latest
          path: linux

      - uses: actions/download-artifact@v2
        with:
          name: croco-windows-latest
          path: windows

      - uses: actions/download-artifact@v2
        with:
          name: croco-macos-latest
          path: macos

      # get the commit hash
      # https://github.community/t/add-short-sha-to-github-context/16418/11
      - name: get commit infos
        id: commit
        run: echo "::set-output name=hash::$(echo ${GITHUB_SHA} | cut -c1-8)"

        # echo "::set-output name=msg::$(git log --format=%B -n 1 ${{ github.event.after }})"
      - name: create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.commit.outputs.hash }}
          release_name: Release ${{ steps.commit.outputs.hash }}
          body: This is an automated build for commit ${{ steps.commit.outputs.hash }}.
          draft: false
          prerelease: true

      - name: upload Linux binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./linux/croco.zip
          asset_name: croco-linux-${{ steps.commit.outputs.hash }}.zip
          asset_content_type: application/zip

      - name: upload Windows binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./windows/croco.zip
          asset_name: croco-windows-${{ steps.commit.outputs.hash }}.zip
          asset_content_type: application/zip

      - name: upload MacOS binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./macos/croco.zip
          asset_name: croco-macos-${{ steps.commit.outputs.hash }}.zip
          asset_content_type: application/zip
