name: ci

defaults:
  run:
    shell: bash

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  CARGO_TERM_COLOR: always

jobs:
  # build croco on every OS
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Clone project
        uses: actions/checkout@v2

      # we cannot set the sys_prefix on windows with Bash because it constructs a /d/ path instead of d:/
      # which later conduces in a cache miss

      # move clang out of msys, which triggers build errors if it's in the path
      - name: set LLVM_SYS_PREFIX and add clang to PATH [windows]
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          echo "LLVM_SYS_110_PREFIX=$PWD/llvm" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          cp -r C:/msys64/usr/bin C:/clang
          cd C:/clang
          rm *gcc*.exe
          rm g++.exe
          echo "C:/clang" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: set LLVM_SYS_PREFIX [unix]
        if: matrix.os != 'windows-latest'
        run: |
          echo "LLVM_SYS_110_PREFIX=$PWD/llvm" >> $GITHUB_ENV

      - name: Cache LLVM
        id: cache-llvm
        uses: actions/cache@v2
        with:
          path: ${{ env.LLVM_SYS_110_PREFIX }}
          key: llvm-11rc2-${{ matrix.os }}

      - name: Download LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: curl -O -L https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.0-rc2/llvm-11.0.0rc2.src.tar.xz

      - name: Unzip LLVM
        # windows tar doesn't support xz files, so we use 7z instead in two steps
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          7z x llvm-*.tar.xz
          7z x llvm-*.tar
          mv llvm-*.src llvm

      - uses: seanmiddleditch/gha-setup-ninja@v3
        if: steps.cache-llvm.outputs.cache-hit != 'true' && matrix.os != 'windows-latest'

      - name: Prepare LLVM [unix]
        if: steps.cache-llvm.outputs.cache-hit != 'true' && matrix.os != 'windows-latest'
        run: |
          cd llvm
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -G Ninja ..

      # we can't use ninja on windows because it's outputting lib*.a files where we need *.lib for llvm-sys
      - name: Prepare LLVM [windows]
        if: steps.cache-llvm.outputs.cache-hit != 'true' && matrix.os == 'windows-latest'
        run: |
          cd llvm
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..

      - name: Build LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          cd llvm/build
          cmake --build . --config Release
          cmake -DCMAKE_INSTALL_PREFIX=$LLVM_SYS_110_PREFIX -P cmake_install.cmake

      - name: Build Croco release
        run: |
          cargo build --release

      - name: Run tests
        run: cargo test --release --lib --tests --no-fail-fast

      - name: Zip crocoi & crocol [windows]
        if: matrix.os == 'windows-latest'
        run: |
          cd target/release
          7z a croco.zip crocoi.exe crocol.exe

      - name: Zip crocoi & crocol [unix]
        if: matrix.os != 'windows-latest'
        run: |
          cd target/release
          7z a croco.zip crocoi crocol

      - name: Upload zip
        uses: actions/upload-artifact@v2
        with:
          name: croco-${{ matrix.os }}
          path: target/release/croco.zip

  # upload the resulting binaries to github releases
  upload:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # retreive the previously saved binaries
      - uses: actions/download-artifact@v2
        with:
          name: croco-ubuntu-latest
          path: linux

      - uses: actions/download-artifact@v2
        with:
          name: croco-windows-latest
          path: windows

      - uses: actions/download-artifact@v2
        with:
          name: croco-macos-latest
          path: macos

      # get the commit hash
      # https://github.community/t/add-short-sha-to-github-context/16418/11
      - name: get commit infos
        id: commit
        run: echo "::set-output name=hash::$(echo ${GITHUB_SHA} | cut -c1-8)"

        # echo "::set-output name=msg::$(git log --format=%B -n 1 ${{ github.event.after }})"
      - name: create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.commit.outputs.hash }}
          release_name: Release ${{ steps.commit.outputs.hash }}
          body: This is an automated build for commit ${{ steps.commit.outputs.hash }}.
          draft: false
          prerelease: true

      - name: upload Linux binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./linux/croco.zip
          asset_name: croco-linux-${{ steps.commit.outputs.hash }}.zip
          asset_content_type: application/zip

      - name: upload Windows binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./windows/croco.zip
          asset_name: croco-windows-${{ steps.commit.outputs.hash }}.zip
          asset_content_type: application/zip

      - name: upload MacOS binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./macos/croco.zip
          asset_name: croco-macos-${{ steps.commit.outputs.hash }}.zip
          asset_content_type: application/zip
